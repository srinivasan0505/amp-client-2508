/*
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAlertManagerDefinitionResponse;
import org.openapitools.client.model.CreateLoggingConfigurationResponse;
import org.openapitools.client.model.CreateRuleGroupsNamespaceRequest;
import org.openapitools.client.model.CreateRuleGroupsNamespaceResponse;
import org.openapitools.client.model.CreateWorkspaceRequest;
import org.openapitools.client.model.CreateWorkspaceResponse;
import org.openapitools.client.model.DescribeAlertManagerDefinitionResponse;
import org.openapitools.client.model.DescribeLoggingConfigurationResponse;
import org.openapitools.client.model.DescribeRuleGroupsNamespaceResponse;
import org.openapitools.client.model.DescribeWorkspaceResponse;
import org.openapitools.client.model.ListRuleGroupsNamespacesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListWorkspacesResponse;
import org.openapitools.client.model.PutAlertManagerDefinitionRequest;
import org.openapitools.client.model.PutAlertManagerDefinitionResponse;
import org.openapitools.client.model.PutRuleGroupsNamespaceRequest;
import org.openapitools.client.model.PutRuleGroupsNamespaceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateLoggingConfigurationRequest;
import org.openapitools.client.model.UpdateLoggingConfigurationResponse;
import org.openapitools.client.model.UpdateWorkspaceAliasRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create an alert manager definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlertManagerDefinitionTest() throws ApiException {
        String workspaceId = null;
        PutAlertManagerDefinitionRequest putAlertManagerDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAlertManagerDefinitionResponse response = api.createAlertManagerDefinition(workspaceId, putAlertManagerDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create logging configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLoggingConfigurationTest() throws ApiException {
        String workspaceId = null;
        UpdateLoggingConfigurationRequest updateLoggingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLoggingConfigurationResponse response = api.createLoggingConfiguration(workspaceId, updateLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a rule group namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleGroupsNamespaceTest() throws ApiException {
        String workspaceId = null;
        CreateRuleGroupsNamespaceRequest createRuleGroupsNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRuleGroupsNamespaceResponse response = api.createRuleGroupsNamespace(workspaceId, createRuleGroupsNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new AMP workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkspaceTest() throws ApiException {
        CreateWorkspaceRequest createWorkspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkspaceResponse response = api.createWorkspace(createWorkspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an alert manager definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlertManagerDefinitionTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.deleteAlertManagerDefinition(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Delete logging configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLoggingConfigurationTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.deleteLoggingConfiguration(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Delete a rule groups namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleGroupsNamespaceTest() throws ApiException {
        String workspaceId = null;
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.deleteRuleGroupsNamespace(workspaceId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Deletes an AMP workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.deleteWorkspace(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Describes an alert manager definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAlertManagerDefinitionTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAlertManagerDefinitionResponse response = api.describeAlertManagerDefinition(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes logging configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLoggingConfigurationTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoggingConfigurationResponse response = api.describeLoggingConfiguration(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describe a rule groups namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRuleGroupsNamespaceTest() throws ApiException {
        String workspaceId = null;
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRuleGroupsNamespaceResponse response = api.describeRuleGroupsNamespace(workspaceId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing AMP workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceResponse response = api.describeWorkspace(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists rule groups namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRuleGroupsNamespacesTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        String nextToken = null;
        Integer maxResults = null;
        ListRuleGroupsNamespacesResponse response = api.listRuleGroupsNamespaces(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists the tags you have assigned to the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all AMP workspaces, including workspaces being created or deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspacesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String alias = null;
        Integer maxResults = null;
        ListWorkspacesResponse response = api.listWorkspaces(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, alias, maxResults);
        // TODO: test validations
    }

    /**
     * Update an alert manager definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAlertManagerDefinitionTest() throws ApiException {
        String workspaceId = null;
        PutAlertManagerDefinitionRequest putAlertManagerDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutAlertManagerDefinitionResponse response = api.putAlertManagerDefinition(workspaceId, putAlertManagerDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a rule groups namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRuleGroupsNamespaceTest() throws ApiException {
        String workspaceId = null;
        String name = null;
        PutRuleGroupsNamespaceRequest putRuleGroupsNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutRuleGroupsNamespaceResponse response = api.putRuleGroupsNamespace(workspaceId, name, putRuleGroupsNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update logging configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLoggingConfigurationTest() throws ApiException {
        String workspaceId = null;
        UpdateLoggingConfigurationRequest updateLoggingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateLoggingConfigurationResponse response = api.updateLoggingConfiguration(workspaceId, updateLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an AMP workspace alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceAliasTest() throws ApiException {
        String workspaceId = null;
        UpdateWorkspaceAliasRequest updateWorkspaceAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateWorkspaceAlias(workspaceId, updateWorkspaceAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
